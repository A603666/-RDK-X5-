# 鱼群'视'卫智能渔业水环境管理系统 - PC端依赖管理
# PC端Web界面、数据处理、MQTT通讯、AI助手等功能依赖
# 支持Windows和Linux平台

# ============================================================================
# Web框架依赖
# ============================================================================

# Flask Web框架
Flask>=2.3.0,<3.0.0                    # Web应用框架
Flask-CORS>=4.0.0,<5.0.0               # 跨域资源共享支持

# Web服务器（生产环境）
gunicorn>=20.1.0,<22.0.0               # WSGI HTTP服务器（Linux）
waitress>=2.1.0,<3.0.0                 # WSGI服务器（Windows兼容）

# ============================================================================
# 数据处理和分析依赖
# ============================================================================

# 核心数据处理
numpy>=1.21.0,<2.0.0                   # 数值计算基础库
pandas>=1.5.0,<3.0.0                   # 数据分析和处理
scipy>=1.9.0,<2.0.0                    # 科学计算库

# 数据可视化
matplotlib>=3.5.0,<4.0.0               # 绘图库
seaborn>=0.11.0,<1.0.0                 # 统计数据可视化
plotly>=5.10.0,<6.0.0                  # 交互式图表库

# ============================================================================
# 机器学习和AI依赖
# ============================================================================

# 深度学习框架
tensorflow>=2.10.0,<3.0.0              # TensorFlow深度学习框架
scikit-learn>=1.1.0,<2.0.0             # 机器学习库

# 模型优化
joblib>=1.2.0,<2.0.0                   # 模型序列化和并行计算

# ============================================================================
# 通讯和网络依赖
# ============================================================================

# MQTT通讯
paho-mqtt>=1.6.0,<2.0.0                # MQTT客户端库

# HTTP请求
requests>=2.28.0,<3.0.0                # HTTP请求库
urllib3>=1.26.0,<3.0.0                 # HTTP库

# WebSocket支持（可选）
Flask-SocketIO>=5.3.0,<6.0.0           # WebSocket支持
python-socketio>=5.7.0,<6.0.0          # Socket.IO客户端

# ============================================================================
# 配置和环境管理
# ============================================================================

# 环境变量管理
python-dotenv>=0.19.0,<2.0.0           # 环境变量加载

# 配置文件处理
PyYAML>=6.0,<7.0                       # YAML配置文件支持
configparser>=5.3.0,<6.0.0             # INI配置文件支持

# ============================================================================
# 任务调度和异步处理
# ============================================================================

# 定时任务
schedule>=1.2.0,<2.0.0                 # 定时任务调度
APScheduler>=3.9.0,<4.0.0              # 高级任务调度器

# 异步处理
asyncio-mqtt>=0.11.0,<1.0.0            # 异步MQTT客户端

# ============================================================================
# 数据库支持（可选）
# ============================================================================

# SQLite支持（Python内置）
# sqlite3

# 其他数据库支持（可选）
# SQLAlchemy>=1.4.0,<3.0.0             # ORM框架
# pymongo>=4.0.0,<5.0.0                # MongoDB驱动

# ============================================================================
# 日志和监控
# ============================================================================

# 日志处理
loguru>=0.6.0,<1.0.0                   # 高级日志库（可选）

# 性能监控
psutil>=5.9.0,<6.0.0                   # 系统资源监控

# ============================================================================
# 安全和认证（可选）
# ============================================================================

# JWT认证
PyJWT>=2.4.0,<3.0.0                    # JWT令牌处理

# 密码哈希
bcrypt>=3.2.0,<5.0.0                   # 密码哈希

# ============================================================================
# 开发和测试依赖
# ============================================================================

# 测试框架
pytest>=7.0.0,<8.0.0                   # 测试框架
pytest-flask>=1.2.0,<2.0.0             # Flask测试支持
pytest-asyncio>=0.21.0,<1.0.0          # 异步测试支持

# 代码质量
flake8>=5.0.0,<7.0.0                   # 代码风格检查
black>=22.0.0,<24.0.0                  # 代码格式化
isort>=5.10.0,<6.0.0                   # 导入排序

# 类型检查
mypy>=0.991,<2.0.0                     # 静态类型检查

# ============================================================================
# 文档生成（可选）
# ============================================================================

# API文档
flask-restx>=1.0.0,<2.0.0              # REST API文档生成

# ============================================================================
# 安装脚本
# ============================================================================

# PC端完整安装命令：
# 
# 1. 创建虚拟环境（推荐）
# python -m venv venv
# source venv/bin/activate  # Linux/Mac
# venv\Scripts\activate     # Windows
# 
# 2. 升级pip
# python -m pip install --upgrade pip
# 
# 3. 安装依赖
# pip install -r pc_requirements.txt
# 
# 4. 配置环境变量
# cp .env.example .env
# # 编辑.env文件，填入相关配置
# 
# 5. 启动服务
# python pc/main.py

# ============================================================================
# 生产环境部署
# ============================================================================

# Linux生产环境：
# gunicorn --bind 0.0.0.0:5001 --workers 4 pc.main:app

# Windows生产环境：
# waitress-serve --host=0.0.0.0 --port=5001 pc.main:app

# Docker部署：
# docker build -t fishery-pc .
# docker run -p 5001:5001 fishery-pc

# ============================================================================
# 性能优化配置
# ============================================================================

# 内存优化：
# - 使用pandas的category数据类型减少内存使用
# - 定期清理历史数据
# - 使用数据库存储大量历史数据

# CPU优化：
# - 使用多进程处理数据密集型任务
# - 异步处理MQTT消息
# - 缓存频繁访问的数据

# 网络优化：
# - 启用gzip压缩
# - 使用CDN加速静态资源
# - 实现API响应缓存

# ============================================================================
# 故障排除
# ============================================================================

# 常见问题：
# 1. 端口占用：netstat -tulpn | grep :5001
# 2. 依赖冲突：pip check
# 3. 内存不足：监控系统资源使用
# 4. MQTT连接失败：检查网络和防火墙设置

# 调试工具：
# - Flask调试模式：export FLASK_DEBUG=1
# - 详细日志：设置LOG_LEVEL=DEBUG
# - 性能分析：使用cProfile
# - 内存分析：使用memory_profiler
